package com.luckydut97.tennispark.core.ui.components.community

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage
import com.luckydut97.tennispark.core.domain.model.CommunityPost
import com.luckydut97.tennispark.core.R
import com.luckydut97.tennispark.core.ui.components.animation.PressableComponent
import com.luckydut97.tennispark.core.ui.components.common.LinkifiedText
import com.luckydut97.tennispark.core.utils.ImageDownloadManager
import android.widget.Toast
import kotlinx.coroutines.launch

/**
 * Ïª§ÎÆ§ÎãàÌã∞ Í≤åÏãúÍ∏Ä Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
 */
@Composable
fun CommunityPostCard(
    post: CommunityPost,
    onPostClick: () -> Unit,
    onLikeClick: () -> Unit,
    onCommentClick: () -> Unit,
    onAlarmClick: () -> Unit,
    onEditClick: (CommunityPost) -> Unit,
    onDeleteClick: (CommunityPost) -> Unit,
    onReportClick: (CommunityPost) -> Unit = {},
    isDetailView: Boolean = false, // ÏÉÅÏÑ∏ ÌôîÎ©¥ Ïó¨Î∂Ä
    isNotificationToggling: Boolean = false,
    modifier: Modifier = Modifier
) {
    var showMenu by remember { mutableStateOf(false) }

    // Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Í¥ÄÎ†® ÏÉÅÌÉú
    var showDownloadDialog by remember { mutableStateOf(false) }
    var selectedImageUrl by remember { mutableStateOf("") }

    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()
    val imageDownloadManager = remember { ImageDownloadManager(context) }

    Card(
        modifier = modifier
            .fillMaxWidth()
            .clickable { onPostClick() },
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
        shape = RoundedCornerShape(0.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 18.dp, vertical = 16.dp)
        ) {
            // ÏûëÏÑ±Ïûê Ï†ïÎ≥¥ Î∞è Ïï°ÏÖò Î≤ÑÌäºÎì§
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.Top
            ) {
                Column {
                    // ÏûëÏÑ±ÏûêÎ™Ö
                    Text(
                        text = post.authorName,
                        fontSize = 16.sp,
                        fontWeight = FontWeight.SemiBold,
                        color = Color(0xFF202020),
                        letterSpacing = (-0.5).sp
                    )

                    Spacer(modifier = Modifier.height(0.dp))

                    // ÏûëÏÑ± ÏãúÍ∞Ñ
                    Text(
                        text = post.relativeTimeText,
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Normal,
                        color = Color(0xFFD1D1D1),
                        letterSpacing = (-0.5).sp
                    )
                }

                // ÏïåÎ¶º, ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº
                Row(
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    if (post.notificationEnabled != null) {
                        val alarmIconRes = if (post.notificationEnabled == true) {
                            R.drawable.ic_alarm_card_on
                        } else {
                            R.drawable.ic_alarm_card
                        }
                        PressableComponent(
                            onClick = {
                                if (!isNotificationToggling) {
                                    onAlarmClick()
                                }
                            },
                            modifier = Modifier.size(20.dp),
                            enabled = !isNotificationToggling
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.Center
                            ) {
                                Icon(
                                    painter = painterResource(id = alarmIconRes),
                                    contentDescription = "ÏïåÎ¶º",
                                    tint = Color.Unspecified,
                                    modifier = Modifier.size(20.dp)
                                )
                            }
                        }
                    }

                    Box {
                        PressableComponent(
                            onClick = { showMenu = true },
                            modifier = Modifier.size(20.dp)
                        ) {
                            Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.Center
                            ) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ic_detail_card),
                                    contentDescription = "ÎçîÎ≥¥Í∏∞",
                                    tint = Color(0xFF8B9096),
                                    modifier = Modifier.size(20.dp)
                                )
                            }
                        }

                        DropdownMenu(
                            expanded = showMenu,
                            onDismissRequest = { showMenu = false },
                            containerColor = Color.Transparent,
                            tonalElevation = 0.dp,
                            shadowElevation = 0.dp,
                            shape = RectangleShape
                        ) {
                            CommunityOverflowMenu(
                                isAuthor = post.authoredByMe,
                                onEditClick = {
                                    showMenu = false
                                    onEditClick(post)
                                },
                                onDeleteClick = {
                                    showMenu = false
                                    onDeleteClick(post)
                                },
                                onReportClick = {
                                    showMenu = false
                                    onReportClick(post)
                                }
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Ïù¥ÎØ∏ÏßÄ Î†åÎçîÎßÅ Î°úÍ∑∏ (ÏÉÅÏÑ∏ ÌôîÎ©¥ÏóêÏÑúÎßå)
            if (isDetailView) {
                LaunchedEffect(post.id) {
                    println("üñºÔ∏è ===== CommunityPostCard ÏÉÅÏÑ∏ Ïù¥ÎØ∏ÏßÄ Î†åÎçîÎßÅ =====")
                    println("üñºÔ∏è Í≤åÏãúÍ∏Ä ID: ${post.id}")
                    println("üñºÔ∏è photos Map: ${post.photos}")
                    println("üñºÔ∏è sortedPhotos List: ${post.sortedPhotos}")
                    println("üñºÔ∏è sortedPhotos Í∞úÏàò: ${post.sortedPhotos.size}")
                }
            }

            // Ï†úÎ™©
            Text(
                text = post.title,
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF202020),
                letterSpacing = (-0.5).sp,
                maxLines = if (isDetailView) Int.MAX_VALUE else 1,
                overflow = if (isDetailView) TextOverflow.Visible else TextOverflow.Ellipsis,
                modifier = Modifier.clickable(
                    interactionSource = remember { MutableInteractionSource() },
                    indication = null
                ) { onPostClick() }
            )

            Spacer(modifier = Modifier.height(8.dp))

            // ÎÇ¥Ïö© (5Ï§Ñ Ï†úÌïú)
            LinkifiedText(
                text = post.content,
                style = TextStyle(
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Normal,
                    color = Color(0xFF202020),
                    letterSpacing = (-0.5).sp,
                    lineHeight = 24.sp
                ),
                maxLines = if (isDetailView) Int.MAX_VALUE else 5,
                overflow = if (isDetailView) TextOverflow.Visible else TextOverflow.Ellipsis,
                onTextClick = onPostClick
            )

            // ÎçîÎ≥¥Í∏∞ Î≤ÑÌäº (Ìôà ÌôîÎ©¥ÏóêÏÑú 5Ï§Ñ Ïù¥ÏÉÅÏùº ÎïåÎßå ÌëúÏãú)
            if (!isDetailView && post.isContentLong) {
                Text(
                    text = "ÎçîÎ≥¥Í∏∞",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Normal,
                    color = Color(0xFF5AB97D),
                    letterSpacing = (-0.5).sp,
                    modifier = Modifier
                        .clickable(
                            interactionSource = remember { MutableInteractionSource() },
                            indication = null
                        ) { onPostClick() } // ÎçîÎ≥¥Í∏∞ ÌÅ¥Î¶≠Ïãú ÏÉÅÏÑ∏ ÌôîÎ©¥ÏúºÎ°ú
                        .padding(top = 4.dp)
                )
            }

            // photos ÌëúÏãú (ÏÉÅÏÑ∏ ÌôîÎ©¥Ïö© - ÎÇ¥Ïö© Î∞îÎ°ú ÏïÑÎûò) - ÌÅ¥Î¶≠ Í∏∞Îä• Ï∂îÍ∞Ä
            if (isDetailView && post.sortedPhotos.isNotEmpty()) {
                Spacer(modifier = Modifier.height(12.dp))
                post.sortedPhotos.forEachIndexed { index, photoUrl ->
                    AsyncImage(
                        model = photoUrl,
                        contentDescription = "Í≤åÏãúÍ∏Ä Ïù¥ÎØ∏ÏßÄ ${index + 1}",
                        modifier = Modifier
                            .fillMaxWidth()
                            .wrapContentHeight()
                            .clickable {
                                selectedImageUrl = photoUrl
                                showDownloadDialog = true
                            },
                        contentScale = ContentScale.FillWidth
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // Ï°∞ÌöåÏàò
            Text(
                text = "${post.formattedViewCount}Î™ÖÏù¥ Î¥§Ïñ¥Ïöî",
                fontSize = 14.sp,
                fontWeight = FontWeight.Normal,
                color = Color(0xFFD1D1D1),
                letterSpacing = (-0.5).sp
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Ï¢ãÏïÑÏöî Î∞è ÎåìÍ∏Ä Ïàò
            Text(
                text = "Ï¢ãÏïÑÏöî ${post.likeCount}Í∞ú ¬∑ ÎåìÍ∏Ä ${post.commentCount}Í∞ú",
                fontSize = 14.sp,
                fontWeight = FontWeight.Normal,
                color = Color(0xFF8B9096),
                letterSpacing = (-0.5).sp
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Íµ¨Î∂ÑÏÑ†
            Divider(
                color = Color(0xFFF5F5F5),
                thickness = 1.dp,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(12.dp))

            // ÌïòÎã® Ïï°ÏÖò Î≤ÑÌäºÎì§
            Row(
                modifier = Modifier.fillMaxWidth()
            ) {
                // Ï¢ãÏïÑÏöî Î≤ÑÌäº
                Row(
                    modifier = Modifier
                        .weight(1f)
                        .clickable { onLikeClick() }
                        .padding(vertical = 8.dp),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(
                            id = if (post.likedByMe) R.drawable.ic_like_on else R.drawable.ic_like_off
                        ),
                        contentDescription = "Ï¢ãÏïÑÏöî",
                        tint = if (post.likedByMe) Color(0xFF1C7756) else Color(0xFF8B9096),
                        modifier = Modifier.size(20.dp)
                    )

                    Spacer(modifier = Modifier.width(8.dp))

                    Text(
                        text = "Ï¢ãÏïÑÏöî",
                        fontSize = 14.sp,
                        fontWeight = if (post.likedByMe) FontWeight.Bold else FontWeight.Normal,
                        color = if (post.likedByMe) Color(0xFF1C7756) else Color(0xFF8B9096),
                        letterSpacing = (-0.5).sp
                    )
                }

                // ÎåìÍ∏ÄÏì∞Í∏∞ Î≤ÑÌäº
                Row(
                    modifier = Modifier
                        .weight(1f)
                        .clickable { onCommentClick() }
                        .padding(vertical = 8.dp),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_speech_balloon),
                        contentDescription = "ÎåìÍ∏ÄÏì∞Í∏∞",
                        tint = Color(0xFF8B9096),
                        modifier = Modifier.size(20.dp)
                    )

                    Spacer(modifier = Modifier.width(8.dp))

                    Text(
                        text = "ÎåìÍ∏ÄÏì∞Í∏∞",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Normal,
                        color = Color(0xFF8B9096),
                        letterSpacing = (-0.5).sp
                    )
                }
            }
        }
    }

    // Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showDownloadDialog) {
        ImageDownloadDialog(
            onDismiss = { showDownloadDialog = false },
            onConfirm = {
                coroutineScope.launch {
                    val result = imageDownloadManager.downloadImage(selectedImageUrl)
                    result.fold(
                        onSuccess = { message ->
                            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                        },
                        onFailure = { error ->
                            Toast.makeText(context, error.message, Toast.LENGTH_LONG).show()
                        }
                    )
                    showDownloadDialog = false
                }
            }
        )
    }
}
