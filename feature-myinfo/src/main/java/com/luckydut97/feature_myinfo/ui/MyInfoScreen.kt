package com.luckydut97.feature_myinfo.ui

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.luckydut97.tennispark.core.R
import com.luckydut97.tennispark.core.ui.components.navigation.TopBar
import com.luckydut97.tennispark.core.ui.theme.Pretendard
import com.luckydut97.feature_myinfo.viewmodel.MyInfoViewModel
import com.luckydut97.tennispark.core.data.model.PointHistoryItem
import com.luckydut97.tennispark.core.ui.components.navigation.NoArrowTopBar
import com.luckydut97.tennispark.core.ui.components.ad.UnifiedAdBannerApi
import com.luckydut97.tennispark.core.data.model.Advertisement
import com.luckydut97.tennispark.core.data.model.AdPosition
import com.luckydut97.tennispark.core.data.network.NetworkModule
import com.luckydut97.tennispark.core.data.repository.AdBannerRepositoryImpl
import com.luckydut97.tennispark.core.ui.components.animation.PressableComponent
import com.luckydut97.tennispark.core.ui.components.button.MyPageDetailButton
import com.luckydut97.tennispark.core.ui.components.button.MyPageDetailDivider
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * ÎÇ¥ Ï†ïÎ≥¥ ÌôîÎ©¥
 */
@Composable
fun MyInfoScreen(
    onBackClick: () -> Unit = {},
    onSettingsClick: () -> Unit = {},
    onPointHistoryClick: () -> Unit = {},
    onActivityHistoryClick: () -> Unit = {},
    viewModel: MyInfoViewModel = viewModel()
) {
    val tag = "üîç ÎîîÎ≤ÑÍπÖ: MyInfoScreen"

    // ViewModelÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Íµ¨ÎèÖ
    val points by viewModel.points.collectAsState()
    val histories by viewModel.histories.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val memberInfo by viewModel.memberInfo.collectAsState()
    val matchRecord by viewModel.matchRecord.collectAsState()

    // Í¥ëÍ≥† Î∞∞ÎÑà ÏÉÅÌÉú - MEMBER position
    var advertisements by remember { mutableStateOf<List<Advertisement>>(emptyList()) }
    var isLoadingAds by remember { mutableStateOf(false) }

    val adBannerRepository = remember {
        AdBannerRepositoryImpl(NetworkModule.apiService)
    }

    // Ìè¨Ïù∏Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ìï∏Îì§Îü¨
    val coroutineScope = rememberCoroutineScope()
    val refreshPoints = remember { { viewModel.refreshAllData() } }

    // Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞ ÎòêÎäî Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
    val userName = memberInfo?.name ?: "Î°úÎî© Ï§ë..."

    // Îß§Ïπò Í∏∞Î°ùÏùÑ ÏÉàÎ°úÏö¥ APIÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞ (Í∏∞Ï°¥ memberInfo.record ÎåÄÏã†)
    val gameRecord = matchRecord?.let { record ->
        com.luckydut97.tennispark.core.data.model.GameRecord(
            wins = record.wins,
            draws = record.draws,
            losses = record.losses,
            score = record.matchPoint, // matchPointÎ•º scoreÎ°ú Îß§Ìïë
            ranking = record.ranking
        )
    } ?: com.luckydut97.tennispark.core.data.model.GameRecord(
        wins = 0, draws = 0, losses = 0, score = 0, ranking = 0
    )

    // üî• ÌôîÎ©¥ ÏßÑÏûÖ ÏãúÎßàÎã§ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    LaunchedEffect(Unit) {
        viewModel.refreshAllData()

        // MEMBER position Í¥ëÍ≥† Î°úÎìú
        Log.d(tag, "[MyInfoScreen] loading MEMBER advertisements")
        isLoadingAds = true
        try {
            adBannerRepository.getAdvertisements(AdPosition.MEMBER).collect { ads ->
                Log.d(tag, "[MyInfoScreen] received ${ads.size} MEMBER advertisements")
                advertisements = ads
            }
        } catch (e: Exception) {
            Log.e(tag, "[MyInfoScreen] Exception: ${e.message}", e)
            advertisements = emptyList()
        } finally {
            isLoadingAds = false
        }
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            NoArrowTopBar(
                title = "ÌöåÏõê Ï†ïÎ≥¥" // Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠ÎåÄÎ°ú "ÎßàÏù¥ÏÇ¥Îûò"

            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // ÏÉÅÎã® Í≥†Ï†ï ÏòÅÏó≠
            item {
                Column(
                    modifier = Modifier.padding(horizontal = 17.dp)
                ) {
                    // ÌöåÏõêÎ™Ö
                    Spacer(modifier = Modifier.height(24.dp))

                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 18.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "$userName ÌöåÏõêÎãò",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            fontFamily = Pretendard,
                            color = Color.Black
                        )

                        PressableComponent(
                            onClick = onSettingsClick,
                            modifier = Modifier.size(24.dp)
                        ) {
                            Icon(
                                painter = painterResource(id = com.luckydut97.feature_myinfo.R.drawable.ic_setting),
                                contentDescription = "ÏÑ§Ï†ï",
                                modifier = Modifier.size(24.dp),
                                tint = Color.Unspecified
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Ìè¨Ïù∏Ìä∏ Î∞è Í≤ΩÍ∏∞ Í∏∞Î°ù Î∞ïÏä§
                    PressableComponent(
                        onClick = refreshPoints,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(110.dp)
                                .background(
                                    color = Color(0xFFF2FAF4),
                                    shape = RoundedCornerShape(8.dp)
                                )
                                .padding(horizontal = 24.dp),
                            contentAlignment = Alignment.Center // Ï§ëÏïô Ï†ïÎ†¨
                        ) {
                            Column(
                                verticalArrangement = Arrangement.Center // ÏàòÏßÅ Ï§ëÏïô Ï†ïÎ†¨
                            ) {
                                // ÎÇ¥ Ìè¨Ïù∏Ìä∏ Row (Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = "ÎÇ¥ Ìè¨Ïù∏Ìä∏",
                                        fontSize = 15.sp,
                                        fontWeight = FontWeight.Medium,
                                        fontFamily = Pretendard,
                                        color = Color.Black
                                    )

                                    Row(
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Icon(
                                            painter = painterResource(id = R.drawable.ic_coin_black),
                                            contentDescription = null,
                                            modifier = Modifier.size(14.dp),
                                            tint = Color.Unspecified
                                        )

                                        Spacer(modifier = Modifier.width(4.dp))

                                        Text(
                                            text = String.format(
                                                "%,d",
                                                points
                                            ), // ViewModelÏóêÏÑú Î∞õÏùÄ Ïã§Ï†ú Ìè¨Ïù∏Ìä∏
                                            fontSize = 18.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )

                                        Text(
                                            text = "P",
                                            fontSize = 18.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )
                                    }
                                }

                                Spacer(modifier = Modifier.height(16.dp))

                                // Í≤ΩÍ∏∞ Í∏∞Î°ù Row
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = "Í≤ΩÍ∏∞ Í∏∞Î°ù",
                                        fontSize = 15.sp,
                                        fontWeight = FontWeight.Medium,
                                        fontFamily = Pretendard,
                                        color = Color.Black
                                    )

                                    Row(
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Text(
                                            text = "${gameRecord.wins}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFF145F44)
                                        )
                                        Text(
                                            text = "Ïäπ ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFF145F44)
                                        )

                                        Text(
                                            text = "${gameRecord.draws}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFCBA439)
                                        )
                                        Text(
                                            text = "Î¨¥ ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFCBA439)
                                        )

                                        Text(
                                            text = "${gameRecord.losses}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFEF3629)
                                        )
                                        Text(
                                            text = "Ìå® ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFEF3629)
                                        )

                                        Text(
                                            text = "(${gameRecord.score}Ï†ê/${gameRecord.ranking}ÏúÑ)",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.Normal,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )
                                    }
                                }
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))
                }
            }

            // Í¥ëÍ≥† Î∞∞ÎÑà - API Í∏∞Î∞òÏúºÎ°ú Î≥ÄÍ≤Ω
            item {
                if (advertisements.isNotEmpty()) {
                    Log.d(
                        tag,
                        "[MyInfoScreen] showing ${advertisements.size} MEMBER advertisements"
                    )
                    UnifiedAdBannerApi(
                        advertisements = advertisements
                    )
                } else if (!isLoadingAds) {
                    Log.d(tag, "[MyInfoScreen] no MEMBER advertisements available")
                    // Í¥ëÍ≥†Í∞Ä ÏóÜÏúºÎ©¥ ÎÜíÏù¥ Ï°∞Ï†ïÏùÑ ÏúÑÌïú Spacer
                    Spacer(modifier = Modifier.height(60.dp))
                }
            }

            // Ïó¨Î∞± Î∞è Íµ¨Î∂ÑÏÑ†
            item {
                Spacer(modifier = Modifier.height(36.dp))

                // Íµ¨Î∂ÑÏÑ† (Ï¢åÏö∞ Ïó¨Î∞± ÏóÜÏù¥)
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(12.dp)
                        .background(Color(0xFFF5F5F5))
                )
            }

            // ÎßàÏù¥ÌéòÏù¥ÏßÄ ÏÑ∏Î∂Ä Î≤ÑÌäºÎì§
            item {
                Spacer(modifier = Modifier.height(20.dp))

                MyPageDetailButton(
                    iconRes = R.drawable.ic_coin_black,
                    text = "ÎÇòÏùò Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠",
                    iconSize = 14.dp,
                    onClick = onPointHistoryClick
                )

                MyPageDetailDivider()

                /*MyPageDetailButton(
                    iconRes = R.drawable.ic_tennis,
                    text = "ÎÇòÏùò ÌôúÎèôÏã†Ï≤≠ ÎÇ¥Ïó≠",
                    iconSize = 20.dp,
                    onClick = onActivityHistoryClick
                )*/

                Spacer(modifier = Modifier.height(40.dp)) // ÌïòÎã® Ïó¨Î∞±
            }
        }
    }
}
