package com.luckydut97.feature_myinfo.ui

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.luckydut97.tennispark.core.R
import com.luckydut97.tennispark.core.ui.components.navigation.TopBar
import com.luckydut97.tennispark.core.ui.theme.Pretendard
import com.luckydut97.feature_myinfo.viewmodel.MyInfoViewModel
import com.luckydut97.tennispark.core.data.model.PointHistoryItem
import com.luckydut97.tennispark.core.ui.components.navigation.NoArrowTopBar
import com.luckydut97.tennispark.core.ui.components.ad.UnifiedAdBanner
import com.luckydut97.tennispark.core.data.model.unifiedAdBannerList
import com.luckydut97.tennispark.core.ui.components.animation.PressableComponent
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * ÎÇ¥ Ï†ïÎ≥¥ ÌôîÎ©¥
 */
@Composable
fun MyInfoScreen(
    onBackClick: () -> Unit = {},
    onSettingsClick: () -> Unit = {},
    viewModel: MyInfoViewModel = viewModel()
) {
    // ViewModelÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Íµ¨ÎèÖ
    val points by viewModel.points.collectAsState()
    val histories by viewModel.histories.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val memberInfo by viewModel.memberInfo.collectAsState()

    // Ìè¨Ïù∏Ìä∏ ÏÉàÎ°úÍ≥†Ïπ® Ìï∏Îì§Îü¨
    val coroutineScope = rememberCoroutineScope()
    val refreshPoints = remember { { viewModel.refreshAllData() } }

    // Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞ ÎòêÎäî Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
    val userName = memberInfo?.name ?: "Î°úÎî© Ï§ë..."
    val gameRecord = memberInfo?.record ?: com.luckydut97.tennispark.core.data.model.GameRecord(
        wins = 0, draws = 0, losses = 0, score = 0, ranking = 0
    )

    // üî• ÌôîÎ©¥ ÏßÑÏûÖ ÏãúÎßàÎã§ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    LaunchedEffect(Unit) {
        viewModel.refreshAllData()
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            NoArrowTopBar(
                title = "ÌöåÏõê Ï†ïÎ≥¥" // Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠ÎåÄÎ°ú "ÎßàÏù¥ÏÇ¥Îûò"

            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // ÏÉÅÎã® Í≥†Ï†ï ÏòÅÏó≠
            item {
                Column(
                    modifier = Modifier.padding(horizontal = 17.dp)
                ) {
                    // ÌöåÏõêÎ™Ö
                    Spacer(modifier = Modifier.height(24.dp))

                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 18.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "$userName ÌöåÏõêÎãò",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            fontFamily = Pretendard,
                            color = Color.Black
                        )

                        PressableComponent(
                            onClick = onSettingsClick,
                            modifier = Modifier.size(24.dp)
                        ) {
                            Icon(
                                painter = painterResource(id = com.luckydut97.feature_myinfo.R.drawable.ic_setting),
                                contentDescription = "ÏÑ§Ï†ï",
                                modifier = Modifier.size(24.dp),
                                tint = Color.Unspecified
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Ìè¨Ïù∏Ìä∏ Î∞è Í≤ΩÍ∏∞ Í∏∞Î°ù Î∞ïÏä§
                    PressableComponent(
                        onClick = refreshPoints,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(110.dp)
                                .background(
                                    color = Color(0xFFF2FAF4),
                                    shape = RoundedCornerShape(8.dp)
                                )
                                .padding(horizontal = 24.dp),
                            contentAlignment = Alignment.Center // Ï§ëÏïô Ï†ïÎ†¨
                        ) {
                            Column(
                                verticalArrangement = Arrangement.Center // ÏàòÏßÅ Ï§ëÏïô Ï†ïÎ†¨
                            ) {
                                // ÎÇ¥ Ìè¨Ïù∏Ìä∏ Row (Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = "ÎÇ¥ Ìè¨Ïù∏Ìä∏",
                                        fontSize = 15.sp,
                                        fontWeight = FontWeight.Medium,
                                        fontFamily = Pretendard,
                                        color = Color.Black
                                    )

                                    Row(
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Icon(
                                            painter = painterResource(id = R.drawable.ic_coin_black),
                                            contentDescription = null,
                                            modifier = Modifier.size(14.dp),
                                            tint = Color.Unspecified
                                        )

                                        Spacer(modifier = Modifier.width(4.dp))

                                        Text(
                                            text = String.format(
                                                "%,d",
                                                points
                                            ), // ViewModelÏóêÏÑú Î∞õÏùÄ Ïã§Ï†ú Ìè¨Ïù∏Ìä∏
                                            fontSize = 18.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )

                                        Text(
                                            text = "P",
                                            fontSize = 18.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )
                                    }
                                }

                                Spacer(modifier = Modifier.height(16.dp))

                                // Í≤ΩÍ∏∞ Í∏∞Î°ù Row
                                Row(
                                    modifier = Modifier.fillMaxWidth(),
                                    horizontalArrangement = Arrangement.SpaceBetween,
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Text(
                                        text = "Í≤ΩÍ∏∞ Í∏∞Î°ù",
                                        fontSize = 15.sp,
                                        fontWeight = FontWeight.Medium,
                                        fontFamily = Pretendard,
                                        color = Color.Black
                                    )

                                    Row(
                                        verticalAlignment = Alignment.CenterVertically
                                    ) {
                                        Text(
                                            text = "${gameRecord.wins}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFF145F44)
                                        )
                                        Text(
                                            text = "Ïäπ ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFF145F44)
                                        )

                                        Text(
                                            text = "${gameRecord.draws}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFCBA439)
                                        )
                                        Text(
                                            text = "Î¨¥ ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFCBA439)
                                        )

                                        Text(
                                            text = "${gameRecord.losses}",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFEF3629)
                                        )
                                        Text(
                                            text = "Ìå® ",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.SemiBold,
                                            fontFamily = Pretendard,
                                            color = Color(0xFFEF3629)
                                        )

                                        Text(
                                            text = "(${gameRecord.score}Ï†ê/${gameRecord.ranking}ÏúÑ)",
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.Normal,
                                            fontFamily = Pretendard,
                                            color = Color.Black
                                        )
                                    }
                                }
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))
                }
            }

            // Í¥ëÍ≥† Î∞∞ÎÑà
            item {
                UnifiedAdBanner(
                    bannerList = unifiedAdBannerList
                )
            }

            // Ïó¨Î∞± Î∞è Íµ¨Î∂ÑÏÑ†
            item {
                Spacer(modifier = Modifier.height(36.dp))

                // Íµ¨Î∂ÑÏÑ† (Ï¢åÏö∞ Ïó¨Î∞± ÏóÜÏù¥)
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(12.dp)
                        .background(Color(0xFFF5F5F5))
                )
            }

            // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ ÌÉÄÏù¥ÌãÄ
            item {
                Column(
                    modifier = Modifier.padding(horizontal = 17.dp)
                ) {
                    Spacer(modifier = Modifier.height(36.dp))

                    Text(
                        text = "ÎÇòÏùò Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        fontFamily = Pretendard,
                        color = Color.Black
                    )

                    Spacer(modifier = Modifier.height(36.dp))
                }
            }

            // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ ÏòÅÏó≠ (ÎèôÏ†Å ÎÜíÏù¥)
            item {
                // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ Í∞úÏàòÏóê Îî∞Î•∏ ÎèôÏ†Å ÎÜíÏù¥ Í≥ÑÏÇ∞
                val dynamicHeight = if (histories.isEmpty() && !isLoading) {
                    101.dp // Îπà ÏÉÅÌÉúÏùº Îïå ÏµúÏÜå ÎÜíÏù¥
                } else {
                    // ÎÇ¥Ïó≠Ïù¥ ÏûàÏùÑ Îïå: Í∞Å ÏïÑÏù¥ÌÖú 21dp + Í∞ÑÍ≤© 21dp = 42dp per item
                    // ÏµúÎåÄ 350dp, ÏµúÏÜå 150dp
                    val calculatedHeight = (histories.size * 42 + 100).dp
                    minOf(calculatedHeight, 350.dp).coerceAtLeast(150.dp)
                }

                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(dynamicHeight)
                        .padding(horizontal = 17.dp)
                ) {
                    if (histories.isEmpty() && !isLoading) {
                        // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏùÑ Îïå: Ïä§ÌÅ¨Î°§ ÏóÜÏù¥ Îã®Ïàú ÌëúÏãú
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(65.dp)
                                .padding(horizontal = 26.dp)
                                .background(
                                    color = Color(0xFFF5F5F5),
                                    shape = RoundedCornerShape(10.dp)
                                ),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "ÌòÑÏû¨ Î≥¥Ïú† Ï§ëÏù∏ Ìè¨Ïù∏Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.",
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Normal,
                                fontFamily = Pretendard,
                                color = Color.Black
                            )
                        }
                    } else {
                        // Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠Ïù¥ ÏûàÏùÑ Îïå: Ïä§ÌÅ¨Î°§ Í∞ÄÎä•
                        LazyColumn(
                            modifier = Modifier.fillMaxSize()
                        ) {
                            items(histories) { history ->
                                ApiPointHistoryItem(history = history)
                                Spacer(modifier = Modifier.height(21.dp))
                            }

                            // ÌïòÎã® Ïó¨Î∞±
                            item {
                                Spacer(modifier = Modifier.height(40.dp))
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * API Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÎäî Ìè¨Ïù∏Ìä∏ ÎÇ¥Ïó≠ ÏïÑÏù¥ÌÖú Ïª¥Ìè¨ÎÑåÌä∏
 */
@Composable
fun ApiPointHistoryItem(
    history: PointHistoryItem,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .height(21.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Row(
            modifier = Modifier.weight(1f),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ÎÇ†ÏßúÎ•º "YYYY.MM.DD"ÏóêÏÑú "MM.DD" ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
            val displayDate = if (history.date.length >= 10) {
                history.date.substring(5) // "MM.DD" Î∂ÄÎ∂ÑÎßå Ï∂îÏ∂ú
            } else {
                history.date
            }

            Text(
                text = displayDate,
                fontSize = 14.sp,
                fontWeight = FontWeight.Normal,
                fontFamily = Pretendard,
                color = Color(0xFF959595),
                modifier = Modifier.width(45.dp)
            )

            Spacer(modifier = Modifier.width(17.dp))

            Text(
                text = history.title,
                fontSize = 18.sp,
                fontWeight = FontWeight.Medium,
                fontFamily = Pretendard,
                color = Color.Black,
                modifier = Modifier.weight(1f),
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
        }

        Spacer(modifier = Modifier.width(8.dp))

        Text(
            text = if (history.type == "EARNED") {
                "+${String.format("%,d", history.point)}P"
            } else {
                "-${String.format("%,d", history.point)}P"
            },
            fontSize = 18.sp,
            fontWeight = FontWeight.Medium,
            fontFamily = Pretendard,
            color = if (history.type == "EARNED") Color(0xFF145F44) else Color(0xFFEF3629)
        )
    }
}
