package com.luckydut97.feature.attendance.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.luckydut97.tennispark.core.data.repository.PointRepository
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class AttendanceViewModel(
    private val pointRepository: PointRepository = PointRepository()
) : ViewModel() {

    private val tag = "üîç ÎîîÎ≤ÑÍπÖ: AttendanceViewModel"

    private val _uiState = MutableStateFlow(AttendanceUiState())
    val uiState: StateFlow<AttendanceUiState> = _uiState.asStateFlow()

    fun processQrCode(qrCode: String) {
        // Ï§ëÎ≥µ Ïä§Ï∫î Î∞©ÏßÄ
        if (_uiState.value.isLoading) return


        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true, errorMessage = null)

            try {
                // QR ÏΩîÎìúÏóêÏÑú URL Ï∂îÏ∂ú (Í∞ÑÎã®Ìïú ÏòàÏãú)
                val eventUrl = extractEventUrl(qrCode)

                if (eventUrl != null) {

                    // Ïã§Ï†ú QR Ïù¥Î≤§Ìä∏ API Ìò∏Ï∂ú
                    val response = pointRepository.postQrEvent(eventUrl)

                    if (response.success) {
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            showSuccessDialog = true,
                            successMessage = "Ï∂úÏÑùÏ≤¥ÌÅ¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
                        )
                    } else {

                        val errorMessage =
                            if (response.error?.message?.contains("Ïù¥ÎØ∏ Ïã†Ï≤≠Ìïú") == true) {
                                "Ïù¥ÎØ∏ Ï∂úÏÑù Ï≤¥ÌÅ¨Îêú Ïù¥Î≤§Ìä∏ÏûÖÎãàÎã§."
                            } else {
                                "Ïù¥ÎØ∏ Ï∂úÏÑù Ï≤¥ÌÅ¨Îêú Ïù¥Î≤§Ìä∏ÏûÖÎãàÎã§."
                        }

                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            errorMessage = errorMessage
                        )
                    }
                } else {
                    // ÌÖåÏä§Ìä∏Ïö© ÏãúÎÆ¨Î†àÏù¥ÏÖò (Í∞úÎ∞ú Ï§ë)
                    delay(1000) // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò

                    _uiState.value = _uiState.value.copy(
                        isLoading = false,
                        showSuccessDialog = true,
                        successMessage = "Ï∂úÏÑùÏ≤¥ÌÅ¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! (ÌÖåÏä§Ìä∏)"
                    )
                }
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    errorMessage = "QR ÏΩîÎìú Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                )
            }
        }
    }

    /**
     * QR ÏΩîÎìúÏóêÏÑú Ïù¥Î≤§Ìä∏ URL Ï∂îÏ∂ú
     * Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî QR ÏΩîÎìú ÌòïÏãùÏóê Îî∞Îùº ÌååÏã± Î°úÏßÅ Íµ¨ÌòÑ
     */
    private fun extractEventUrl(qrCode: String): String? {
        return when {
            // Ïã§Ï†ú URL ÌòïÌÉúÏùò QR ÏΩîÎìúÏù∏ Í≤ΩÏö∞
            qrCode.startsWith("http://") || qrCode.startsWith("https://") -> {
                if (qrCode.contains("/api/") || qrCode.contains("event") || qrCode.contains("checkin")) {
                    qrCode
                } else {
                    null
                }
            }
            // ÌÖåÏä§Ìä∏Ïö© QR ÏΩîÎìú Ìå®ÌÑ¥
            qrCode.startsWith("TENNIS_PARK_") || qrCode.contains("TEST_QR") -> {
                // Ïã§Ï†ú ÏÑúÎ≤ÑÍ∞Ä Ï§ÄÎπÑÎêòÎ©¥ Ïó¨Í∏∞ÏÑú Ïã§Ï†ú URLÎ°ú Î≥ÄÌôò
                null // ÏßÄÍ∏àÏùÄ ÌÖåÏä§Ìä∏ Î™®ÎìúÎ°ú Ï≤òÎ¶¨
            }

            else -> null
        }
    }

    fun dismissSuccessDialog() {
        _uiState.value = _uiState.value.copy(showSuccessDialog = false)
    }

    fun clearError() {
        _uiState.value = _uiState.value.copy(errorMessage = null)
    }
}

data class AttendanceUiState(
    val isLoading: Boolean = false,
    val showSuccessDialog: Boolean = false,
    val successMessage: String = "",
    val errorMessage: String? = null
)
