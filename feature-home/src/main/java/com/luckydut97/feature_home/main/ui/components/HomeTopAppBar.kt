package com.luckydut97.feature_home.main.ui.components

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.luckydut97.tennispark.feature.home.R
import com.luckydut97.tennispark.core.ui.components.animation.PressableComponent
import com.luckydut97.tennispark.core.ui.theme.Pretendard
import com.luckydut97.tennispark.core.domain.usecase.GetUnreadCountUseCase
import com.luckydut97.tennispark.core.data.repository.NotificationRepositoryImpl
import com.luckydut97.tennispark.core.data.network.NetworkModule
import com.luckydut97.tennispark.core.fcm.MyFirebaseMessagingService
import kotlinx.coroutines.launch

@Composable
fun HomeTopAppBar(
    onNotificationClick: () -> Unit,
    onSearchClick: () -> Unit
) {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()

    // ÏÑúÎ≤Ñ Í∏∞Î∞ò ÎØ∏ÏùΩÏùÄ ÏïåÎ¶º Ïàò Ï°∞Ìöå
    val getUnreadCountUseCase = remember {
        val repository = NotificationRepositoryImpl(NetworkModule.apiService)
        GetUnreadCountUseCase(repository)
    }

    var notificationCount by remember { mutableStateOf(0) }

    // ÏÑúÎ≤ÑÏóêÏÑú Î∞∞ÏßÄ ÏàòÎ•º Ï°∞ÌöåÌïòÎäî Ìï®Ïàò
    val refreshBadgeCount = {
        coroutineScope.launch {
            try {
                val count = getUnreadCountUseCase()
                notificationCount = count
                // üî• Îã§Î•∏ ÌôîÎ©¥ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù Î∞∞ÏßÄ Ïàò Ï†ÄÏû•
                com.luckydut97.tennispark.core.utils.BadgeCountManager.setBadgeCount(count)
            } catch (e: Exception) {
                notificationCount = 0 // Ïã§Ìå® Ïãú 0 ÌëúÏãú
                com.luckydut97.tennispark.core.utils.BadgeCountManager.setBadgeCount(0)
            }
        }
    }

    // ÌôîÎ©¥ ÏßÑÏûÖ ÏãúÎßàÎã§ ÏÑúÎ≤ÑÏóêÏÑú Î∞∞ÏßÄ Ïàò Ï°∞Ìöå
    LaunchedEffect(Unit) {
        refreshBadgeCount()
    }

    // FCM Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏ ÏàòÏã† ÏÑ§Ï†ï
    DisposableEffect(context) {
        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                if (intent?.action == MyFirebaseMessagingService.ACTION_NOTIFICATION_RECEIVED) {
                    // FCM ÏïåÎ¶º ÏàòÏã† Ïãú Î∞∞ÏßÄ Ïàò Í∞±Ïã†
                    refreshBadgeCount()
                }
            }
        }

        val intentFilter = IntentFilter(MyFirebaseMessagingService.ACTION_NOTIFICATION_RECEIVED)
        context.registerReceiver(receiver, intentFilter)

        onDispose {
            context.unregisterReceiver(receiver)
        }
    }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(55.dp)
            .background(Color(0xFFF4F6F8))
            .padding(horizontal = 17.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        // Î°úÍ≥†
        Image(
            painter = painterResource(id = R.drawable.ic_typo_logo),
            contentDescription = "Tennis Park Logo",
            modifier = Modifier
                .width(128.dp)
                .height(30.42.dp)
        )

        // ÏïåÎ¶º Î∞è Í≤ÄÏÉâ Î≤ÑÌäº
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            // ÏïåÎ¶º ÏïÑÏù¥ÏΩòÍ≥º Î∞∞ÏßÄÎ•º Í∞êÏã∏Îäî Box
            PressableComponent(
                onClick = onNotificationClick,
                modifier = Modifier.size(27.dp)
            ) {
                Box(
                    modifier = Modifier.size(27.dp)
                ) {
                    // ÏïåÎ¶º ÏïÑÏù¥ÏΩò
                    Image(
                        painter = painterResource(id = R.drawable.ic_alarm),
                        contentDescription = "Notifications",
                        modifier = Modifier.size(27.dp)
                    )

                    // ÏïåÎ¶º Î∞∞ÏßÄ (Í∞úÏàòÍ∞Ä 0Î≥¥Îã§ ÌÅ¥ ÎïåÎßå ÌëúÏãú)
                    if (notificationCount > 0) {
                        val badgeText = when {
                            notificationCount <= 99 -> notificationCount.toString()
                            else -> "99+"
                        }
                        val badgeWidth = when {
                            badgeText.length == 1 -> 11.8.dp // Ìïú ÏûêÎ¶¨: 11.8dp
                            badgeText.length == 2 -> 17.dp   // Îëê ÏûêÎ¶¨: 17dp
                            else -> 21.dp                    // ÏÑ∏ ÏûêÎ¶¨ Ïù¥ÏÉÅ: 21dp
                        }

                        Box(
                            modifier = Modifier
                                .align(Alignment.TopEnd)
                                .offset(x = (-1).dp, y = 5.dp) // Î∞∞ÏßÄÎ•º ÏïÑÎûòÎ°ú Îçî ÎÇ¥Î¶º
                                .size(width = badgeWidth, height = 10.4.dp)
                                .background(
                                    color = Color(0xFFFA8451),
                                    shape = RoundedCornerShape(6.dp)
                                ),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = badgeText,
                                fontSize = 7.8.sp,
                                fontFamily = Pretendard,
                                fontWeight = FontWeight.SemiBold,
                                color = Color.White,
                                letterSpacing = (-0.5).sp,
                                textAlign = TextAlign.Center,
                                lineHeight = 7.8.sp, // Ìè∞Ìä∏ ÌÅ¨Í∏∞ÏôÄ ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï
                                maxLines = 1,
                                modifier = Modifier.offset(x = (-0.2).dp, y = (-0.2).dp)
                            )
                        }
                    }
                }
            }

            /*Spacer(modifier = Modifier.width(9.dp))

            Image(
                painter = painterResource(id = R.drawable.ic_search),
                contentDescription = "Search",
                modifier = Modifier
                    .size(27.dp)
                    .clickable(onClick = onSearchClick)
            )*/
        }
    }
}
